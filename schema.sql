

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET transaction_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pg_net" WITH SCHEMA "extensions";






COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "moddatetime" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE OR REPLACE FUNCTION "public"."get_monthly_visitors_count"() RETURNS bigint
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO ''
    AS $$
BEGIN
  RETURN (
    SELECT COUNT(DISTINCT session_id)
    FROM public.page_views
    WHERE created_at >= DATE_TRUNC('month', NOW())
  );
END;
$$;


ALTER FUNCTION "public"."get_monthly_visitors_count"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."get_online_visitors_count"() RETURNS bigint
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO ''
    AS $$
BEGIN
  RETURN (
    SELECT COUNT(DISTINCT session_id)
    FROM public.page_views
    WHERE created_at > NOW() - INTERVAL '5 minutes'
  );
END;
$$;


ALTER FUNCTION "public"."get_online_visitors_count"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."get_today_visitors_count"() RETURNS bigint
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO ''
    AS $$
BEGIN
  RETURN (
    SELECT COUNT(DISTINCT session_id)
    FROM public.page_views
    WHERE created_at >= DATE_TRUNC('day', NOW())
  );
END;
$$;


ALTER FUNCTION "public"."get_today_visitors_count"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."get_total_affiliate_clicks"() RETURNS bigint
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO ''
    AS $$
BEGIN
  RETURN (
    SELECT COUNT(*) FROM public.affiliate_clicks
  );
END;
$$;


ALTER FUNCTION "public"."get_total_affiliate_clicks"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."get_total_blog_post_views"() RETURNS bigint
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO ''
    AS $$
BEGIN
  RETURN (
    SELECT COUNT(*)
    FROM public.page_views
    WHERE path LIKE '/blog/%' AND path NOT LIKE '/blog/page/%' AND path != '/blog'
  );
END;
$$;


ALTER FUNCTION "public"."get_total_blog_post_views"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."get_yearly_visitors_count"() RETURNS bigint
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO ''
    AS $$
BEGIN
  RETURN (
    SELECT COUNT(DISTINCT session_id)
    FROM public.page_views
    WHERE created_at >= DATE_TRUNC('year', NOW())
  );
END;
$$;


ALTER FUNCTION "public"."get_yearly_visitors_count"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."handle_blog_post_update"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    SET "search_path" TO ''
    AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$;


ALTER FUNCTION "public"."handle_blog_post_update"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."handle_new_user"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO ''
    AS $$
BEGIN
  INSERT INTO public.profiles (id, full_name, avatar_url)
  VALUES (NEW.id, NEW.raw_user_meta_data->>'full_name', NEW.raw_user_meta_data->>'avatar_url');
  RETURN NEW;
END;
$$;


ALTER FUNCTION "public"."handle_new_user"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."update_settings_timestamp"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$;


ALTER FUNCTION "public"."update_settings_timestamp"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."affiliate_clicks" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "vpn_id" bigint,
    "session_id" "uuid" NOT NULL
);


ALTER TABLE "public"."affiliate_clicks" OWNER TO "postgres";


ALTER TABLE "public"."affiliate_clicks" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."affiliate_clicks_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."blog_categories" (
    "id" bigint NOT NULL,
    "name" "text" NOT NULL,
    "slug" "text" NOT NULL,
    "description" "text",
    "created_at" timestamp with time zone DEFAULT "now"()
);


ALTER TABLE "public"."blog_categories" OWNER TO "postgres";


COMMENT ON TABLE "public"."blog_categories" IS 'Stores categories for blog posts.';



ALTER TABLE "public"."blog_categories" ALTER COLUMN "id" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME "public"."blog_categories_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."blog_comments" (
    "id" bigint NOT NULL,
    "post_id" bigint NOT NULL,
    "author_id" "uuid",
    "content" "text" NOT NULL,
    "parent_comment_id" bigint,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "guest_name" "text",
    CONSTRAINT "blog_comments_content_check" CHECK (("char_length"("content") > 0)),
    CONSTRAINT "blog_comments_guest_name_check" CHECK (("char_length"("guest_name") > 0))
);


ALTER TABLE "public"."blog_comments" OWNER TO "postgres";


COMMENT ON COLUMN "public"."blog_comments"."guest_name" IS 'The name of the commenter if they are not a registered user.';



ALTER TABLE "public"."blog_comments" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."blog_comments_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."blog_posts" (
    "id" bigint NOT NULL,
    "title" "text" NOT NULL,
    "slug" "text" NOT NULL,
    "content" "text",
    "excerpt" "text",
    "featured_image_url" "text",
    "author_id" "uuid",
    "category_id" bigint,
    "likes_count" integer DEFAULT 0,
    "allow_comments" boolean DEFAULT true,
    "show_cta" boolean DEFAULT true,
    "meta_title" "text",
    "meta_description" "text",
    "created_at" timestamp with time zone DEFAULT "now"(),
    "updated_at" timestamp with time zone DEFAULT "now"(),
    "published_at" timestamp with time zone
);


ALTER TABLE "public"."blog_posts" OWNER TO "postgres";


COMMENT ON TABLE "public"."blog_posts" IS 'Stores blog posts, including content, social features, and affiliate settings.';



COMMENT ON COLUMN "public"."blog_posts"."content" IS 'HTML content generated by a rich text editor like CKEditor 5.';



COMMENT ON COLUMN "public"."blog_posts"."show_cta" IS 'Controls the visibility of call-to-action components for affiliate links.';



ALTER TABLE "public"."blog_posts" ALTER COLUMN "id" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME "public"."blog_posts_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."page_views" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "path" "text" NOT NULL,
    "session_id" "uuid" NOT NULL
);


ALTER TABLE "public"."page_views" OWNER TO "postgres";


ALTER TABLE "public"."page_views" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."page_views_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."profiles" (
    "id" "uuid" NOT NULL,
    "full_name" "text",
    "avatar_url" "text",
    "updated_at" timestamp with time zone DEFAULT "now"()
);


ALTER TABLE "public"."profiles" OWNER TO "postgres";


COMMENT ON TABLE "public"."profiles" IS 'Public profile information for each user.';



CREATE TABLE IF NOT EXISTS "public"."review_pages" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "title" "text" NOT NULL,
    "slug" "text" NOT NULL,
    "description" "text",
    "introduction" "text",
    "conclusion" "text",
    "vpn_ids" integer[]
);


ALTER TABLE "public"."review_pages" OWNER TO "postgres";


ALTER TABLE "public"."review_pages" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."review_pages_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."site_settings" (
    "id" smallint DEFAULT 1 NOT NULL,
    "site_title" "text",
    "site_tagline" "text",
    "favicon_url" "text",
    "meta_description" "text",
    "meta_keywords" "text",
    "meta_author" "text",
    "social_preview_image_url" "text",
    "twitter_handle" "text",
    "updated_at" timestamp with time zone DEFAULT "now"(),
    "google_analytics_id" "text",
    "site_url" "text",
    CONSTRAINT "singleton_check" CHECK (("id" = 1))
);


ALTER TABLE "public"."site_settings" OWNER TO "postgres";


COMMENT ON TABLE "public"."site_settings" IS 'Stores global site-wide settings. This is a singleton table and should only ever have one row.';



COMMENT ON COLUMN "public"."site_settings"."id" IS 'Singleton ID, always 1.';



COMMENT ON COLUMN "public"."site_settings"."site_title" IS 'The main title of the website, used in <title> tags.';



COMMENT ON COLUMN "public"."site_settings"."site_tagline" IS 'A short, descriptive tagline for the site.';



COMMENT ON COLUMN "public"."site_settings"."favicon_url" IS 'URL for the site''s favicon.';



COMMENT ON COLUMN "public"."site_settings"."meta_description" IS 'Default meta description for SEO.';



COMMENT ON COLUMN "public"."site_settings"."meta_keywords" IS 'Default comma-separated meta keywords for SEO.';



COMMENT ON COLUMN "public"."site_settings"."meta_author" IS 'Default author for blog posts and pages.';



COMMENT ON COLUMN "public"."site_settings"."social_preview_image_url" IS 'Default image for social media link previews (e.g., Open Graph).';



COMMENT ON COLUMN "public"."site_settings"."twitter_handle" IS 'The site''s official Twitter handle (e.g., @username).';



COMMENT ON COLUMN "public"."site_settings"."google_analytics_id" IS 'Google Analytics Measurement ID for site tracking.';



COMMENT ON COLUMN "public"."site_settings"."site_url" IS 'Canonical base URL for the site (e.g., https://example.com).';



CREATE TABLE IF NOT EXISTS "public"."vpns" (
    "id" bigint NOT NULL,
    "name" "text" NOT NULL,
    "slug" "text" NOT NULL,
    "logo_url" "text",
    "star_rating" numeric(3,1),
    "price_monthly_usd" numeric(5,2),
    "affiliate_link" "text",
    "categories" "text"[],
    "description" "text",
    "price_yearly_usd" numeric(6,2),
    "price_monthly_eur" numeric(6,2),
    "price_yearly_eur" numeric(6,2),
    "detailed_ratings" "jsonb",
    "supported_devices" "jsonb",
    "pros" "text"[],
    "cons" "text"[],
    "keeps_logs" boolean DEFAULT true NOT NULL,
    "has_court_proof" boolean DEFAULT false NOT NULL,
    "court_proof_content" "text",
    "has_double_vpn" boolean DEFAULT false NOT NULL,
    "based_in_country_name" "text",
    "based_in_country_flag" "text",
    "has_coupon" boolean DEFAULT false NOT NULL,
    "coupon_code" "text",
    "coupon_validity" "date",
    "show_on_homepage" boolean DEFAULT false NOT NULL,
    "full_review" "text",
    "has_p2p" boolean DEFAULT false NOT NULL,
    "has_kill_switch" boolean DEFAULT false NOT NULL,
    "has_ad_blocker" boolean DEFAULT false NOT NULL,
    "has_split_tunneling" boolean DEFAULT false NOT NULL,
    "simultaneous_connections" integer,
    "server_count" integer DEFAULT 0,
    "country_count" integer DEFAULT 0,
    "speed_test_results" "jsonb"
);


ALTER TABLE "public"."vpns" OWNER TO "postgres";


COMMENT ON COLUMN "public"."vpns"."detailed_ratings" IS 'Store detailed ratings like { "speed": 9.5, "privacy": 8.0, "streaming": 9.0 }';



COMMENT ON COLUMN "public"."vpns"."supported_devices" IS 'Store device support status like { "windows": true, "macos": true, "linux": false }';



ALTER TABLE "public"."vpns" ALTER COLUMN "id" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME "public"."vpns_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE ONLY "public"."affiliate_clicks"
    ADD CONSTRAINT "affiliate_clicks_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."blog_categories"
    ADD CONSTRAINT "blog_categories_name_key" UNIQUE ("name");



ALTER TABLE ONLY "public"."blog_categories"
    ADD CONSTRAINT "blog_categories_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."blog_categories"
    ADD CONSTRAINT "blog_categories_slug_key" UNIQUE ("slug");



ALTER TABLE ONLY "public"."blog_comments"
    ADD CONSTRAINT "blog_comments_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."blog_posts"
    ADD CONSTRAINT "blog_posts_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."blog_posts"
    ADD CONSTRAINT "blog_posts_slug_key" UNIQUE ("slug");



ALTER TABLE ONLY "public"."page_views"
    ADD CONSTRAINT "page_views_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."review_pages"
    ADD CONSTRAINT "review_pages_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."review_pages"
    ADD CONSTRAINT "review_pages_slug_key" UNIQUE ("slug");



ALTER TABLE ONLY "public"."site_settings"
    ADD CONSTRAINT "site_settings_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."vpns"
    ADD CONSTRAINT "vpns_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."vpns"
    ADD CONSTRAINT "vpns_slug_key" UNIQUE ("slug");



CREATE INDEX "blog_comments_post_id_idx" ON "public"."blog_comments" USING "btree" ("post_id");



CREATE OR REPLACE TRIGGER "handle_updated_at" BEFORE UPDATE ON "public"."blog_comments" FOR EACH ROW EXECUTE FUNCTION "extensions"."moddatetime"('updated_at');



CREATE OR REPLACE TRIGGER "on_blog_post_update" BEFORE UPDATE ON "public"."blog_posts" FOR EACH ROW EXECUTE FUNCTION "public"."handle_blog_post_update"();



CREATE OR REPLACE TRIGGER "on_settings_update" BEFORE UPDATE ON "public"."site_settings" FOR EACH ROW EXECUTE FUNCTION "public"."update_settings_timestamp"();



ALTER TABLE ONLY "public"."affiliate_clicks"
    ADD CONSTRAINT "affiliate_clicks_vpn_id_fkey" FOREIGN KEY ("vpn_id") REFERENCES "public"."vpns"("id") ON DELETE SET NULL;



ALTER TABLE ONLY "public"."blog_comments"
    ADD CONSTRAINT "blog_comments_author_id_fkey" FOREIGN KEY ("author_id") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."blog_comments"
    ADD CONSTRAINT "blog_comments_parent_comment_id_fkey" FOREIGN KEY ("parent_comment_id") REFERENCES "public"."blog_comments"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."blog_comments"
    ADD CONSTRAINT "blog_comments_post_id_fkey" FOREIGN KEY ("post_id") REFERENCES "public"."blog_posts"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."blog_posts"
    ADD CONSTRAINT "blog_posts_author_id_fkey" FOREIGN KEY ("author_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "public"."blog_posts"
    ADD CONSTRAINT "blog_posts_category_id_fkey" FOREIGN KEY ("category_id") REFERENCES "public"."blog_categories"("id");



ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



CREATE POLICY "Allow DELETE for authenticated users" ON "public"."review_pages" FOR DELETE USING ((( SELECT "auth"."role"() AS "role") = 'authenticated'::"text"));



CREATE POLICY "Allow INSERT for authenticated users" ON "public"."review_pages" FOR INSERT WITH CHECK ((( SELECT "auth"."role"() AS "role") = 'authenticated'::"text"));



CREATE POLICY "Allow READ for everyone" ON "public"."review_pages" FOR SELECT USING (true);



CREATE POLICY "Allow UPDATE for authenticated users" ON "public"."review_pages" FOR UPDATE USING ((( SELECT "auth"."role"() AS "role") = 'authenticated'::"text")) WITH CHECK ((( SELECT "auth"."role"() AS "role") = 'authenticated'::"text"));



CREATE POLICY "Allow admin read access" ON "public"."affiliate_clicks" FOR SELECT USING ((( SELECT "auth"."role"() AS "role") = 'authenticated'::"text"));



CREATE POLICY "Allow admin read access" ON "public"."page_views" FOR SELECT USING ((( SELECT "auth"."role"() AS "role") = 'authenticated'::"text"));



CREATE POLICY "Allow admin update access" ON "public"."site_settings" FOR UPDATE USING (("auth"."role"() = 'authenticated'::"text")) WITH CHECK (("auth"."role"() = 'authenticated'::"text"));



CREATE POLICY "Allow authenticated and guest comments" ON "public"."blog_comments" FOR INSERT WITH CHECK ((( SELECT "auth"."uid"() AS "uid") IS NOT NULL));



CREATE POLICY "Allow authenticated to create categories" ON "public"."blog_categories" FOR INSERT WITH CHECK ((( SELECT "auth"."role"() AS "role") = 'authenticated'::"text"));



CREATE POLICY "Allow authenticated to create posts" ON "public"."blog_posts" FOR INSERT WITH CHECK ((( SELECT "auth"."role"() AS "role") = 'authenticated'::"text"));



CREATE POLICY "Allow authenticated to create vpns" ON "public"."vpns" FOR INSERT WITH CHECK ((( SELECT "auth"."role"() AS "role") = 'authenticated'::"text"));



CREATE POLICY "Allow authenticated to delete categories" ON "public"."blog_categories" FOR DELETE USING ((( SELECT "auth"."role"() AS "role") = 'authenticated'::"text"));



CREATE POLICY "Allow authenticated to delete posts" ON "public"."blog_posts" FOR DELETE USING ((( SELECT "auth"."uid"() AS "uid") = "author_id"));



CREATE POLICY "Allow authenticated to delete vpns" ON "public"."vpns" FOR DELETE USING ((( SELECT "auth"."role"() AS "role") = 'authenticated'::"text"));



CREATE POLICY "Allow authenticated to update categories" ON "public"."blog_categories" FOR UPDATE USING ((( SELECT "auth"."role"() AS "role") = 'authenticated'::"text")) WITH CHECK ((( SELECT "auth"."role"() AS "role") = 'authenticated'::"text"));



CREATE POLICY "Allow authenticated to update posts" ON "public"."blog_posts" FOR UPDATE USING ((( SELECT "auth"."uid"() AS "uid") = "author_id")) WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "author_id"));



CREATE POLICY "Allow authenticated to update vpns" ON "public"."vpns" FOR UPDATE USING ((( SELECT "auth"."role"() AS "role") = 'authenticated'::"text")) WITH CHECK ((( SELECT "auth"."role"() AS "role") = 'authenticated'::"text"));



CREATE POLICY "Allow public insert" ON "public"."affiliate_clicks" FOR INSERT WITH CHECK (true);



CREATE POLICY "Allow public insert" ON "public"."page_views" FOR INSERT WITH CHECK (true);



CREATE POLICY "Allow public read access to comments" ON "public"."blog_comments" FOR SELECT USING (true);



CREATE POLICY "Allow public read-only access" ON "public"."site_settings" FOR SELECT USING (true);



CREATE POLICY "Allow users to delete their own comments" ON "public"."blog_comments" FOR DELETE USING ((( SELECT "auth"."uid"() AS "uid") = "author_id"));



CREATE POLICY "Allow users to update their own comments" ON "public"."blog_comments" FOR UPDATE USING ((( SELECT "auth"."uid"() AS "uid") = "author_id")) WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "author_id"));



CREATE POLICY "Enable read access for all users" ON "public"."vpns" FOR SELECT USING (true);



CREATE POLICY "Public can read blog categories" ON "public"."blog_categories" FOR SELECT TO "authenticated", "anon" USING (true);



CREATE POLICY "Public can read published blog posts" ON "public"."blog_posts" FOR SELECT TO "authenticated", "anon" USING (("published_at" IS NOT NULL));



CREATE POLICY "Public profiles are viewable by everyone." ON "public"."profiles" FOR SELECT USING (true);



CREATE POLICY "Users can insert their own profile." ON "public"."profiles" FOR INSERT WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "id"));



CREATE POLICY "Users can update their own profile." ON "public"."profiles" FOR UPDATE USING ((( SELECT "auth"."uid"() AS "uid") = "id")) WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "id"));



ALTER TABLE "public"."affiliate_clicks" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."blog_categories" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."blog_comments" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."blog_posts" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."page_views" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."review_pages" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."site_settings" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."vpns" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";





GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";


































































































































































GRANT ALL ON FUNCTION "public"."get_monthly_visitors_count"() TO "anon";
GRANT ALL ON FUNCTION "public"."get_monthly_visitors_count"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_monthly_visitors_count"() TO "service_role";



GRANT ALL ON FUNCTION "public"."get_online_visitors_count"() TO "anon";
GRANT ALL ON FUNCTION "public"."get_online_visitors_count"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_online_visitors_count"() TO "service_role";



GRANT ALL ON FUNCTION "public"."get_today_visitors_count"() TO "anon";
GRANT ALL ON FUNCTION "public"."get_today_visitors_count"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_today_visitors_count"() TO "service_role";



GRANT ALL ON FUNCTION "public"."get_total_affiliate_clicks"() TO "anon";
GRANT ALL ON FUNCTION "public"."get_total_affiliate_clicks"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_total_affiliate_clicks"() TO "service_role";



GRANT ALL ON FUNCTION "public"."get_total_blog_post_views"() TO "anon";
GRANT ALL ON FUNCTION "public"."get_total_blog_post_views"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_total_blog_post_views"() TO "service_role";



GRANT ALL ON FUNCTION "public"."get_yearly_visitors_count"() TO "anon";
GRANT ALL ON FUNCTION "public"."get_yearly_visitors_count"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_yearly_visitors_count"() TO "service_role";



GRANT ALL ON FUNCTION "public"."handle_blog_post_update"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_blog_post_update"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_blog_post_update"() TO "service_role";



GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "service_role";



GRANT ALL ON FUNCTION "public"."update_settings_timestamp"() TO "anon";
GRANT ALL ON FUNCTION "public"."update_settings_timestamp"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."update_settings_timestamp"() TO "service_role";


















GRANT ALL ON TABLE "public"."affiliate_clicks" TO "anon";
GRANT ALL ON TABLE "public"."affiliate_clicks" TO "authenticated";
GRANT ALL ON TABLE "public"."affiliate_clicks" TO "service_role";



GRANT ALL ON SEQUENCE "public"."affiliate_clicks_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."affiliate_clicks_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."affiliate_clicks_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."blog_categories" TO "anon";
GRANT ALL ON TABLE "public"."blog_categories" TO "authenticated";
GRANT ALL ON TABLE "public"."blog_categories" TO "service_role";



GRANT ALL ON SEQUENCE "public"."blog_categories_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."blog_categories_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."blog_categories_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."blog_comments" TO "anon";
GRANT ALL ON TABLE "public"."blog_comments" TO "authenticated";
GRANT ALL ON TABLE "public"."blog_comments" TO "service_role";



GRANT ALL ON SEQUENCE "public"."blog_comments_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."blog_comments_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."blog_comments_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."blog_posts" TO "anon";
GRANT ALL ON TABLE "public"."blog_posts" TO "authenticated";
GRANT ALL ON TABLE "public"."blog_posts" TO "service_role";



GRANT ALL ON SEQUENCE "public"."blog_posts_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."blog_posts_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."blog_posts_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."page_views" TO "anon";
GRANT ALL ON TABLE "public"."page_views" TO "authenticated";
GRANT ALL ON TABLE "public"."page_views" TO "service_role";



GRANT ALL ON SEQUENCE "public"."page_views_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."page_views_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."page_views_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."profiles" TO "anon";
GRANT ALL ON TABLE "public"."profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."profiles" TO "service_role";



GRANT ALL ON TABLE "public"."review_pages" TO "anon";
GRANT ALL ON TABLE "public"."review_pages" TO "authenticated";
GRANT ALL ON TABLE "public"."review_pages" TO "service_role";



GRANT ALL ON SEQUENCE "public"."review_pages_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."review_pages_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."review_pages_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."site_settings" TO "anon";
GRANT ALL ON TABLE "public"."site_settings" TO "authenticated";
GRANT ALL ON TABLE "public"."site_settings" TO "service_role";



GRANT ALL ON TABLE "public"."vpns" TO "anon";
GRANT ALL ON TABLE "public"."vpns" TO "authenticated";
GRANT ALL ON TABLE "public"."vpns" TO "service_role";



GRANT ALL ON SEQUENCE "public"."vpns_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."vpns_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."vpns_id_seq" TO "service_role";









ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "service_role";






























RESET ALL;
