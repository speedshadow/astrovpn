-- Create the review_pages table
create table "public"."review_pages" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "title" text not null,
    "slug" text not null,
    "description" text,
    "introduction" text,
    "conclusion" text,
    "vpn_ids" integer[]
);

-- Enable Row Level Security
alter table "public"."review_pages" enable row level security;

-- Create indexes and primary key
CREATE UNIQUE INDEX review_pages_pkey ON public.review_pages USING btree (id);
CREATE UNIQUE INDEX review_pages_slug_key ON public.review_pages USING btree (slug);
alter table "public"."review_pages" add constraint "review_pages_pkey" PRIMARY KEY using index "review_pages_pkey";
alter table "public"."review_pages" add constraint "review_pages_slug_key" UNIQUE using index "review_pages_slug_key";

-- Grant permissions
grant delete on table "public"."review_pages" to "anon";
grant insert on table "public"."review_pages" to "anon";
grant references on table "public"."review_pages" to "anon";
grant select on table "public"."review_pages" to "anon";
grant trigger on table "public"."review_pages" to "anon";
grant truncate on table "public"."review_pages" to "anon";
grant update on table "public"."review_pages" to "anon";
grant delete on table "public"."review_pages" to "authenticated";
grant insert on table "public"."review_pages" to "authenticated";
grant references on table "public"."review_pages" to "authenticated";
grant select on table "public"."review_pages" to "authenticated";
grant trigger on table "public"."review_pages" to "authenticated";
grant truncate on table "public"."review_pages" to "authenticated";
grant update on table "public"."review_pages" to "authenticated";
grant delete on table "public"."review_pages" to "service_role";
grant insert on table "public"."review_pages" to "service_role";
grant references on table "public"."review_pages" to "service_role";
grant select on table "public"."review_pages" to "service_role";
grant trigger on table "public"."review_pages" to "service_role";
grant truncate on table "public"."review_pages" to "service_role";
grant update on table "public"."review_pages" to "service_role";

-- Create idempotent RLS policies
DROP POLICY IF EXISTS "Allow READ for everyone" ON public.review_pages;
CREATE POLICY "Allow READ for everyone" ON public.review_pages FOR SELECT USING (true);

DROP POLICY IF EXISTS "Allow INSERT for authenticated users" ON public.review_pages;
CREATE POLICY "Allow INSERT for authenticated users" ON public.review_pages FOR INSERT TO authenticated WITH CHECK (auth.role() = 'authenticated');

DROP POLICY IF EXISTS "Allow UPDATE for authenticated users" ON public.review_pages;
CREATE POLICY "Allow UPDATE for authenticated users" ON public.review_pages FOR UPDATE TO authenticated USING (auth.role() = 'authenticated') WITH CHECK (auth.role() = 'authenticated');

DROP POLICY IF EXISTS "Allow DELETE for authenticated users" ON public.review_pages;
CREATE POLICY "Allow DELETE for authenticated users" ON public.review_pages FOR DELETE TO authenticated USING (auth.role() = 'authenticated');



