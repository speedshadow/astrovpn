-- Generated by Cascade to optimize RLS policies based on Supabase Performance Advisor

-- Step 1: Clean up duplicate policies on 'blog_comments'
DROP POLICY IF EXISTS "Users can delete their own comments" ON public.blog_comments;
DROP POLICY IF EXISTS "Users can update their own comments" ON public.blog_comments;
DROP POLICY IF EXISTS "Public can read all comments" ON public.blog_comments;

-- Step 2: Clean up duplicate policies on 'vpns'
DROP POLICY IF EXISTS "Public can read all vpns" ON public.vpns;
DROP POLICY IF EXISTS "Allow authorized users to delete" ON public.vpns;
DROP POLICY IF EXISTS "Allow authorized users to insert" ON public.vpns;
DROP POLICY IF EXISTS "Allow authorized users to update" ON public.vpns;

-- Step 3: Re-create and optimize all policies flagged by the advisor.

-- == Table: public.blog_comments ==
-- Drop old policies before recreating them optimized
DROP POLICY IF EXISTS "Allow users to update their own comments" ON public.blog_comments;
DROP POLICY IF EXISTS "Allow users to delete their own comments" ON public.blog_comments;
DROP POLICY IF EXISTS "Allow authenticated and guest comments" ON public.blog_comments;
DROP POLICY IF EXISTS "Allow public read access to comments" ON public.blog_comments;

-- Create optimized policies for blog_comments
CREATE POLICY "Allow public read access to comments" ON public.blog_comments FOR SELECT USING (true);
CREATE POLICY "Allow authenticated and guest comments" ON public.blog_comments FOR INSERT WITH CHECK ((select auth.uid()) IS NOT NULL);
CREATE POLICY "Allow users to update their own comments" ON public.blog_comments FOR UPDATE USING (((select auth.uid()) = author_id)) WITH CHECK (((select auth.uid()) = author_id));
CREATE POLICY "Allow users to delete their own comments" ON public.blog_comments FOR DELETE USING (((select auth.uid()) = author_id));

-- == Table: public.page_views ==
DROP POLICY IF EXISTS "Allow admin read access" ON public.page_views;
CREATE POLICY "Allow admin read access" ON public.page_views FOR SELECT USING (((select auth.role()) = 'authenticated'::text));

-- == Table: public.affiliate_clicks ==
DROP POLICY IF EXISTS "Allow admin read access" ON public.affiliate_clicks;
CREATE POLICY "Allow admin read access" ON public.affiliate_clicks FOR SELECT USING (((select auth.role()) = 'authenticated'::text));

-- == Table: public.blog_posts ==
DROP POLICY IF EXISTS "Allow authenticated to create posts" ON public.blog_posts;
DROP POLICY IF EXISTS "Allow authenticated to update posts" ON public.blog_posts;
DROP POLICY IF EXISTS "Allow authenticated to delete posts" ON public.blog_posts;

CREATE POLICY "Allow authenticated to create posts" ON public.blog_posts FOR INSERT WITH CHECK (((select auth.role()) = 'authenticated'::text));
CREATE POLICY "Allow authenticated to update posts" ON public.blog_posts FOR UPDATE USING (((select auth.uid()) = author_id)) WITH CHECK (((select auth.uid()) = author_id));
CREATE POLICY "Allow authenticated to delete posts" ON public.blog_posts FOR DELETE USING (((select auth.uid()) = author_id));

-- == Table: public.blog_categories ==
DROP POLICY IF EXISTS "Allow authenticated to create categories" ON public.blog_categories;
DROP POLICY IF EXISTS "Allow authenticated to update categories" ON public.blog_categories;
DROP POLICY IF EXISTS "Allow authenticated to delete categories" ON public.blog_categories;

CREATE POLICY "Allow authenticated to create categories" ON public.blog_categories FOR INSERT WITH CHECK (((select auth.role()) = 'authenticated'::text));
CREATE POLICY "Allow authenticated to update categories" ON public.blog_categories FOR UPDATE USING (((select auth.role()) = 'authenticated'::text)) WITH CHECK (((select auth.role()) = 'authenticated'::text));
CREATE POLICY "Allow authenticated to delete categories" ON public.blog_categories FOR DELETE USING (((select auth.role()) = 'authenticated'::text));

-- == Table: public.profiles ==
DROP POLICY IF EXISTS "Users can insert their own profile." ON public.profiles;
DROP POLICY IF EXISTS "Users can update their own profile." ON public.profiles;

CREATE POLICY "Users can insert their own profile." ON public.profiles FOR INSERT WITH CHECK ( (select auth.uid()) = id );
CREATE POLICY "Users can update their own profile." ON public.profiles FOR UPDATE USING ( (select auth.uid()) = id ) WITH CHECK ( (select auth.uid()) = id );

-- == Table: public.review_pages ==
DROP POLICY IF EXISTS "Allow INSERT for authenticated users" ON public.review_pages;
DROP POLICY IF EXISTS "Allow UPDATE for authenticated users" ON public.review_pages;
DROP POLICY IF EXISTS "Allow DELETE for authenticated users" ON public.review_pages;

CREATE POLICY "Allow INSERT for authenticated users" ON public.review_pages FOR INSERT WITH CHECK (((select auth.role()) = 'authenticated'::text));
CREATE POLICY "Allow UPDATE for authenticated users" ON public.review_pages FOR UPDATE USING (((select auth.role()) = 'authenticated'::text)) WITH CHECK (((select auth.role()) = 'authenticated'::text));
CREATE POLICY "Allow DELETE for authenticated users" ON public.review_pages FOR DELETE USING (((select auth.role()) = 'authenticated'::text));

-- == Table: public.vpns ==
-- Drop old policies before recreating them optimized
DROP POLICY IF EXISTS "Allow authenticated to create vpns" ON public.vpns;
DROP POLICY IF EXISTS "Allow authenticated to update vpns" ON public.vpns;
DROP POLICY IF EXISTS "Allow authenticated to delete vpns" ON public.vpns;
DROP POLICY IF EXISTS "Enable read access for all users" ON public.vpns;

-- Create optimized policies for vpns
CREATE POLICY "Enable read access for all users" ON public.vpns FOR SELECT USING (true);
CREATE POLICY "Allow authenticated to create vpns" ON public.vpns FOR INSERT WITH CHECK (((select auth.role()) = 'authenticated'::text));
CREATE POLICY "Allow authenticated to update vpns" ON public.vpns FOR UPDATE USING (((select auth.role()) = 'authenticated'::text)) WITH CHECK (((select auth.role()) = 'authenticated'::text));
CREATE POLICY "Allow authenticated to delete vpns" ON public.vpns FOR DELETE USING (((select auth.role()) = 'authenticated'::text));
