-- Create the blog_categories table
CREATE TABLE IF NOT EXISTS blog_categories (
    id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    name TEXT NOT NULL UNIQUE,
    slug TEXT NOT NULL UNIQUE,
    description TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create the blog_posts table
CREATE TABLE IF NOT EXISTS blog_posts (
    id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    title TEXT NOT NULL,
    slug TEXT NOT NULL UNIQUE,
    content TEXT, -- For CKEditor 5 content
    excerpt TEXT,
    featured_image_url TEXT,
    author_id UUID REFERENCES auth.users(id),
    category_id BIGINT REFERENCES blog_categories(id),
    
    -- Social and engagement fields
    likes_count INT DEFAULT 0,
    allow_comments BOOLEAN DEFAULT TRUE,
    
    -- Affiliate marketing fields
    show_cta BOOLEAN DEFAULT TRUE,
    
    -- SEO fields
    meta_title TEXT,
    meta_description TEXT,
    
    -- Timestamps
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    published_at TIMESTAMPTZ
);

-- Add comments to explain the purpose of the tables and columns
COMMENT ON TABLE blog_categories IS 'Stores categories for blog posts.';
COMMENT ON TABLE blog_posts IS 'Stores blog posts, including content, social features, and affiliate settings.';
COMMENT ON COLUMN blog_posts.content IS 'HTML content generated by a rich text editor like CKEditor 5.';
COMMENT ON COLUMN blog_posts.show_cta IS 'Controls the visibility of call-to-action components for affiliate links.';

-- Create a trigger to automatically update the updated_at timestamp
CREATE OR REPLACE FUNCTION handle_blog_post_update()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER on_blog_post_update
    BEFORE UPDATE ON blog_posts
    FOR EACH ROW
    EXECUTE PROCEDURE handle_blog_post_update();
